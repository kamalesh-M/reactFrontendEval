{"ast":null,"code":"import toInteger from '../toInteger/index.js';\nimport toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n\n  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","map":{"version":3,"names":["toInteger","toDate","startOfUTCWeek","getUTCWeekYear","dirtyDate","dirtyOptions","arguments","length","TypeError","date","year","getUTCFullYear","options","locale","localeFirstWeekContainsDate","firstWeekContainsDate","defaultFirstWeekContainsDate","RangeError","firstWeekOfNextYear","Date","setUTCFullYear","setUTCHours","startOfNextYear","firstWeekOfThisYear","startOfThisYear","getTime"],"sources":["C:/Users/Kamalesh M/Desktop/reactclient/frontend/node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js"],"sourcesContent":["import toInteger from '../toInteger/index.js'\nimport toDate from '../../toDate/index.js'\nimport startOfUTCWeek from '../startOfUTCWeek/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function getUTCWeekYear (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions)\n  var year = date.getUTCFullYear()\n\n  var options = dirtyOptions || {}\n  var locale = options.locale\n  var localeFirstWeekContainsDate = locale &&\n    locale.options &&\n    locale.options.firstWeekContainsDate\n  var defaultFirstWeekContainsDate =\n    localeFirstWeekContainsDate == null\n      ? 1\n      : toInteger(localeFirstWeekContainsDate)\n  var firstWeekContainsDate =\n    options.firstWeekContainsDate == null\n      ? defaultFirstWeekContainsDate\n      : toInteger(options.firstWeekContainsDate)\n\n  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively')\n  }\n\n  var firstWeekOfNextYear = new Date(0)\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate)\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0)\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions)\n\n  var firstWeekOfThisYear = new Date(0)\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate)\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0)\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions)\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year\n  } else {\n    return year - 1\n  }\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,cAAc,MAAM,4BAA4B;;AAEvD;AACA;AACA,eAAe,SAASC,cAAc,CAAEC,SAAS,EAAEC,YAAY,EAAE;EAC/D,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IACxB,MAAM,IAAIC,SAAS,CAAC,gCAAgC,GAAGF,SAAS,CAACC,MAAM,GAAG,UAAU,CAAC;EACvF;EAEA,IAAIE,IAAI,GAAGR,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC;EAC1C,IAAIK,IAAI,GAAGD,IAAI,CAACE,cAAc,EAAE;EAEhC,IAAIC,OAAO,GAAGP,YAAY,IAAI,CAAC,CAAC;EAChC,IAAIQ,MAAM,GAAGD,OAAO,CAACC,MAAM;EAC3B,IAAIC,2BAA2B,GAAGD,MAAM,IACtCA,MAAM,CAACD,OAAO,IACdC,MAAM,CAACD,OAAO,CAACG,qBAAqB;EACtC,IAAIC,4BAA4B,GAC9BF,2BAA2B,IAAI,IAAI,GAC/B,CAAC,GACDd,SAAS,CAACc,2BAA2B,CAAC;EAC5C,IAAIC,qBAAqB,GACvBH,OAAO,CAACG,qBAAqB,IAAI,IAAI,GACjCC,4BAA4B,GAC5BhB,SAAS,CAACY,OAAO,CAACG,qBAAqB,CAAC;;EAE9C;EACA,IAAI,EAAEA,qBAAqB,IAAI,CAAC,IAAIA,qBAAqB,IAAI,CAAC,CAAC,EAAE;IAC/D,MAAM,IAAIE,UAAU,CAAC,2DAA2D,CAAC;EACnF;EAEA,IAAIC,mBAAmB,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC;EACrCD,mBAAmB,CAACE,cAAc,CAACV,IAAI,GAAG,CAAC,EAAE,CAAC,EAAEK,qBAAqB,CAAC;EACtEG,mBAAmB,CAACG,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC3C,IAAIC,eAAe,GAAGpB,cAAc,CAACgB,mBAAmB,EAAEb,YAAY,CAAC;EAEvE,IAAIkB,mBAAmB,GAAG,IAAIJ,IAAI,CAAC,CAAC,CAAC;EACrCI,mBAAmB,CAACH,cAAc,CAACV,IAAI,EAAE,CAAC,EAAEK,qBAAqB,CAAC;EAClEQ,mBAAmB,CAACF,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC3C,IAAIG,eAAe,GAAGtB,cAAc,CAACqB,mBAAmB,EAAElB,YAAY,CAAC;EAEvE,IAAII,IAAI,CAACgB,OAAO,EAAE,IAAIH,eAAe,CAACG,OAAO,EAAE,EAAE;IAC/C,OAAOf,IAAI,GAAG,CAAC;EACjB,CAAC,MAAM,IAAID,IAAI,CAACgB,OAAO,EAAE,IAAID,eAAe,CAACC,OAAO,EAAE,EAAE;IACtD,OAAOf,IAAI;EACb,CAAC,MAAM;IACL,OAAOA,IAAI,GAAG,CAAC;EACjB;AACF"},"metadata":{},"sourceType":"module"}