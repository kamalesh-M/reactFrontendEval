{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  patient: []\n};\nexport const PatientSlice = createSlice({\n  name: 'patient',\n  initialState,\n  reducers: {\n    populatePatientDetail: (state, action) => {\n      state.patient = JSON.parse(JSON.stringify(action.payload));\n    },\n    createNewPatient: (state, action) => {\n      console.log(\"check the payload:\", action.payload);\n      state.patient.push(action.payload);\n    },\n    updateNewPAtient: (state, action) => {\n      console.log(\"check the payload:\", action.payload);\n      const newArr = state.patient.map(obj => {\n        if (obj._id === action.payload._id) {\n          return {\n            Firstname: action.payload.Firstname,\n            Lastname: action.payload.Lastname,\n            Middlename: action.payload.Middlename,\n            phoneNumber: action.payload.phoneNumber,\n            email: action.payload.email,\n            Address: action.payload.Address,\n            weight: action.payload.weight,\n            height: action.payload.height,\n            country: action.payload.country,\n            state: action.payload.state,\n            zipcode: action.payload.zipcode\n          };\n        }\n        state.patient = JSON.parse(JSON.stringify(newArr));\n      });\n      console.log(\"new array:\", newArr);\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  populatePatientDetail,\n  createNewPatient\n} = PatientSlice.actions;\nexport default PatientSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","patient","PatientSlice","name","reducers","populatePatientDetail","state","action","JSON","parse","stringify","payload","createNewPatient","console","log","push","updateNewPAtient","newArr","map","obj","_id","Firstname","Lastname","Middlename","phoneNumber","email","Address","weight","height","country","zipcode","actions","reducer"],"sources":["C:/Users/Kamalesh M/Desktop/reactclient/frontend/src/redux/patientDetail.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n  patient: [],\r\n}\r\n\r\nexport const PatientSlice = createSlice({\r\n  name: 'patient',\r\n  initialState,\r\n  reducers: {\r\n    populatePatientDetail: (state, action) => {\r\n     \r\n      state.patient = JSON.parse(JSON.stringify(action.payload));\r\n    },\r\n    createNewPatient: (state, action) => {\r\n      console.log(\"check the payload:\",action.payload)\r\n      state.patient.push(action.payload);\r\n      \r\n    },\r\n    updateNewPAtient:(state, action) => {\r\n      console.log(\"check the payload:\",action.payload)\r\n      const newArr = state.patient.map(obj => {\r\n        if (obj._id === action.payload._id) {\r\n          return {\r\n            Firstname: action.payload.Firstname,\r\n                Lastname: action.payload.Lastname,\r\n                Middlename: action.payload.Middlename,\r\n                phoneNumber: action.payload.phoneNumber,\r\n                email: action.payload.email,\r\n                Address: action.payload.Address,\r\n                weight: action.payload.weight,\r\n                height: action.payload.height,\r\n                country: action.payload.country,\r\n                state: action.payload.state,\r\n                zipcode: action.payload.zipcode\r\n          };\r\n        }\r\n        \r\n        state.patient = JSON.parse(JSON.stringify(newArr));\r\n      });\r\n      console.log(\"new array:\",newArr)\r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { populatePatientDetail,createNewPatient } = PatientSlice.actions\r\n\r\nexport default PatientSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC;EACtCI,IAAI,EAAE,SAAS;EACfH,YAAY;EACZI,QAAQ,EAAE;IACRC,qBAAqB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAExCD,KAAK,CAACL,OAAO,GAAGO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,MAAM,CAACI,OAAO,CAAC,CAAC;IAC5D,CAAC;IACDC,gBAAgB,EAAE,CAACN,KAAK,EAAEC,MAAM,KAAK;MACnCM,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAACP,MAAM,CAACI,OAAO,CAAC;MAChDL,KAAK,CAACL,OAAO,CAACc,IAAI,CAACR,MAAM,CAACI,OAAO,CAAC;IAEpC,CAAC;IACDK,gBAAgB,EAAC,CAACV,KAAK,EAAEC,MAAM,KAAK;MAClCM,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAACP,MAAM,CAACI,OAAO,CAAC;MAChD,MAAMM,MAAM,GAAGX,KAAK,CAACL,OAAO,CAACiB,GAAG,CAACC,GAAG,IAAI;QACtC,IAAIA,GAAG,CAACC,GAAG,KAAKb,MAAM,CAACI,OAAO,CAACS,GAAG,EAAE;UAClC,OAAO;YACLC,SAAS,EAAEd,MAAM,CAACI,OAAO,CAACU,SAAS;YAC/BC,QAAQ,EAAEf,MAAM,CAACI,OAAO,CAACW,QAAQ;YACjCC,UAAU,EAAEhB,MAAM,CAACI,OAAO,CAACY,UAAU;YACrCC,WAAW,EAAEjB,MAAM,CAACI,OAAO,CAACa,WAAW;YACvCC,KAAK,EAAElB,MAAM,CAACI,OAAO,CAACc,KAAK;YAC3BC,OAAO,EAAEnB,MAAM,CAACI,OAAO,CAACe,OAAO;YAC/BC,MAAM,EAAEpB,MAAM,CAACI,OAAO,CAACgB,MAAM;YAC7BC,MAAM,EAAErB,MAAM,CAACI,OAAO,CAACiB,MAAM;YAC7BC,OAAO,EAAEtB,MAAM,CAACI,OAAO,CAACkB,OAAO;YAC/BvB,KAAK,EAAEC,MAAM,CAACI,OAAO,CAACL,KAAK;YAC3BwB,OAAO,EAAEvB,MAAM,CAACI,OAAO,CAACmB;UAC9B,CAAC;QACH;QAEAxB,KAAK,CAACL,OAAO,GAAGO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACO,MAAM,CAAC,CAAC;MACpD,CAAC,CAAC;MACFJ,OAAO,CAACC,GAAG,CAAC,YAAY,EAACG,MAAM,CAAC;IAClC;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEZ,qBAAqB;EAACO;AAAiB,CAAC,GAAGV,YAAY,CAAC6B,OAAO;AAE9E,eAAe7B,YAAY,CAAC8B,OAAO"},"metadata":{},"sourceType":"module"}