{"ast":null,"code":"import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function getUTCISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","map":{"version":3,"names":["toDate","startOfUTCISOWeek","startOfUTCISOWeekYear","MILLISECONDS_IN_WEEK","getUTCISOWeek","dirtyDate","arguments","length","TypeError","date","diff","getTime","Math","round"],"sources":["C:/Users/Kamalesh M/Desktop/reactclient/frontend/node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js"],"sourcesContent":["import toDate from '../../toDate/index.js'\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js'\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js'\n\nvar MILLISECONDS_IN_WEEK = 604800000\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function getUTCISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var date = toDate(dirtyDate)\n  var diff =\n    startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime()\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,iBAAiB,MAAM,+BAA+B;AAC7D,OAAOC,qBAAqB,MAAM,mCAAmC;AAErE,IAAIC,oBAAoB,GAAG,SAAS;;AAEpC;AACA;AACA,eAAe,SAASC,aAAa,CAACC,SAAS,EAAE;EAC/C,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IACxB,MAAM,IAAIC,SAAS,CACjB,gCAAgC,GAAGF,SAAS,CAACC,MAAM,GAAG,UAAU,CACjE;EACH;EAEA,IAAIE,IAAI,GAAGT,MAAM,CAACK,SAAS,CAAC;EAC5B,IAAIK,IAAI,GACNT,iBAAiB,CAACQ,IAAI,CAAC,CAACE,OAAO,EAAE,GAAGT,qBAAqB,CAACO,IAAI,CAAC,CAACE,OAAO,EAAE;;EAE3E;EACA;EACA;EACA,OAAOC,IAAI,CAACC,KAAK,CAACH,IAAI,GAAGP,oBAAoB,CAAC,GAAG,CAAC;AACpD"},"metadata":{},"sourceType":"module"}