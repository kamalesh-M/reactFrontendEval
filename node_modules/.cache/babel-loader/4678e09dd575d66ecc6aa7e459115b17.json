{"ast":null,"code":"import toDate from '../../toDate/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\nimport startOfUTCWeekYear from '../startOfUTCWeekYear/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000;\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function getUTCWeek(dirtyDate, options) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","map":{"version":3,"names":["toDate","startOfUTCWeek","startOfUTCWeekYear","MILLISECONDS_IN_WEEK","getUTCWeek","dirtyDate","options","arguments","length","TypeError","date","diff","getTime","Math","round"],"sources":["C:/Users/Kamalesh M/Desktop/reactclient/frontend/node_modules/date-fns/esm/_lib/getUTCWeek/index.js"],"sourcesContent":["import toDate from '../../toDate/index.js'\nimport startOfUTCWeek from '../startOfUTCWeek/index.js'\nimport startOfUTCWeekYear from '../startOfUTCWeekYear/index.js'\n\nvar MILLISECONDS_IN_WEEK = 604800000\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function getUTCWeek(dirtyDate, options) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var date = toDate(dirtyDate)\n  var diff =\n    startOfUTCWeek(date, options).getTime() -\n    startOfUTCWeekYear(date, options).getTime()\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,kBAAkB,MAAM,gCAAgC;AAE/D,IAAIC,oBAAoB,GAAG,SAAS;;AAEpC;AACA;AACA,eAAe,SAASC,UAAU,CAACC,SAAS,EAAEC,OAAO,EAAE;EACrD,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IACxB,MAAM,IAAIC,SAAS,CACjB,gCAAgC,GAAGF,SAAS,CAACC,MAAM,GAAG,UAAU,CACjE;EACH;EAEA,IAAIE,IAAI,GAAGV,MAAM,CAACK,SAAS,CAAC;EAC5B,IAAIM,IAAI,GACNV,cAAc,CAACS,IAAI,EAAEJ,OAAO,CAAC,CAACM,OAAO,EAAE,GACvCV,kBAAkB,CAACQ,IAAI,EAAEJ,OAAO,CAAC,CAACM,OAAO,EAAE;;EAE7C;EACA;EACA;EACA,OAAOC,IAAI,CAACC,KAAK,CAACH,IAAI,GAAGR,oBAAoB,CAAC,GAAG,CAAC;AACpD"},"metadata":{},"sourceType":"module"}