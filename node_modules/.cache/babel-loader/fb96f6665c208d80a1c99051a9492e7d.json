{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kamalesh M\\\\Desktop\\\\reactclient\\\\frontend\\\\src\\\\components\\\\protectedRoutes.jsx\";\nimport { useSelector } from \"react-redux\";\nconst {\n  user\n} = useSelector(state => state.user);\nconst doctorJwt = user.access_token;\nimport { Outlet } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function checkAuth(e) {\n  var responseCopy;\n  console.log(\"checking AUth\");\n  await fetch(\"http://localhost:8000/protected\", {\n    method: 'GET',\n    headers: {\n      'Content-type': 'application/json',\n      'Authorization': `Bearer ${doctorJwt}` // notice the Bearer before your token\n    }\n  }).then(response => response.json()).then(json => responseCopy = json);\n\n  //checking if the user is authentic by sending the jwt to validate it\n\n  if (responseCopy.message === \"Authentic User\") {\n    return true;\n  } else {\n    return false;\n  }\n}\nconst ProtectedRoutes = () => {\n  const isAuth = checkAuth();\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 12\n  }, this);\n};\n_c = ProtectedRoutes;\nexport default ProtectedRoutes;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoutes\");","map":{"version":3,"names":["useSelector","user","state","doctorJwt","access_token","Outlet","checkAuth","e","responseCopy","console","log","fetch","method","headers","then","response","json","message","ProtectedRoutes","isAuth"],"sources":["C:/Users/Kamalesh M/Desktop/reactclient/frontend/src/components/protectedRoutes.jsx"],"sourcesContent":["import { useSelector } from \"react-redux\";\r\nconst { user } = useSelector((state) => state.user)\r\nconst doctorJwt = user.access_token\r\nimport { Outlet } from \"react-router\";\r\nasync function checkAuth(e){\r\n    var responseCopy;\r\n    console.log(\"checking AUth\")\r\n    await fetch(\"http://localhost:8000/protected\", {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-type': 'application/json',\r\n            'Authorization': `Bearer ${doctorJwt}`, // notice the Bearer before your token\r\n        }\r\n    }).then(response => response.json())\r\n    .then(json =>  responseCopy = json);\r\n\r\n    //checking if the user is authentic by sending the jwt to validate it\r\n\r\n    if(responseCopy.message === \"Authentic User\"){\r\n        return true\r\n    }\r\n    else{\r\n        return false\r\n    }    \r\n}\r\n\r\nconst ProtectedRoutes = () => {\r\n    const isAuth = checkAuth()\r\n    return <div></div>\r\n};\r\n\r\nexport default ProtectedRoutes"],"mappings":";AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,MAAM;EAAEC;AAAK,CAAC,GAAGD,WAAW,CAAEE,KAAK,IAAKA,KAAK,CAACD,IAAI,CAAC;AACnD,MAAME,SAAS,GAAGF,IAAI,CAACG,YAAY;AACnC,SAASC,MAAM,QAAQ,cAAc;AAAC;AACtC,eAAeC,SAAS,CAACC,CAAC,EAAC;EACvB,IAAIC,YAAY;EAChBC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC5B,MAAMC,KAAK,CAAC,iCAAiC,EAAE;IAC3CC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAASV,SAAU,EAAC,CAAE;IAC5C;EACJ,CAAC,CAAC,CAACW,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAACE,IAAI,IAAKR,YAAY,GAAGQ,IAAI,CAAC;;EAEnC;;EAEA,IAAGR,YAAY,CAACS,OAAO,KAAK,gBAAgB,EAAC;IACzC,OAAO,IAAI;EACf,CAAC,MACG;IACA,OAAO,KAAK;EAChB;AACJ;AAEA,MAAMC,eAAe,GAAG,MAAM;EAC1B,MAAMC,MAAM,GAAGb,SAAS,EAAE;EAC1B,oBAAO;IAAA;IAAA;IAAA;EAAA,QAAW;AACtB,CAAC;AAAC,KAHIY,eAAe;AAKrB,eAAeA,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module"}