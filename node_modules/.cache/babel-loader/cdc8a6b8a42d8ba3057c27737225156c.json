{"ast":null,"code":"import toInteger from '../toInteger/index.js';\nimport getUTCWeekYear from '../getUTCWeekYear/index.js';\nimport startOfUTCWeek from '../startOfUTCWeek/index.js';\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","map":{"version":3,"names":["toInteger","getUTCWeekYear","startOfUTCWeek","startOfUTCWeekYear","dirtyDate","dirtyOptions","arguments","length","TypeError","options","locale","localeFirstWeekContainsDate","firstWeekContainsDate","defaultFirstWeekContainsDate","year","firstWeek","Date","setUTCFullYear","setUTCHours","date"],"sources":["C:/Users/Kamalesh M/Desktop/reactclient/frontend/node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js"],"sourcesContent":["import toInteger from '../toInteger/index.js'\nimport getUTCWeekYear from '../getUTCWeekYear/index.js'\nimport startOfUTCWeek from '../startOfUTCWeek/index.js'\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nexport default function startOfUTCWeekYear (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var options = dirtyOptions || {}\n  var locale = options.locale\n  var localeFirstWeekContainsDate = locale &&\n    locale.options &&\n    locale.options.firstWeekContainsDate\n  var defaultFirstWeekContainsDate =\n    localeFirstWeekContainsDate == null\n      ? 1\n      : toInteger(localeFirstWeekContainsDate)\n  var firstWeekContainsDate =\n    options.firstWeekContainsDate == null\n      ? defaultFirstWeekContainsDate\n      : toInteger(options.firstWeekContainsDate)\n\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions)\n  var firstWeek = new Date(0)\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate)\n  firstWeek.setUTCHours(0, 0, 0, 0)\n  var date = startOfUTCWeek(firstWeek, dirtyOptions)\n  return date\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,cAAc,MAAM,4BAA4B;;AAEvD;AACA;AACA,eAAe,SAASC,kBAAkB,CAAEC,SAAS,EAAEC,YAAY,EAAE;EACnE,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IACxB,MAAM,IAAIC,SAAS,CAAC,gCAAgC,GAAGF,SAAS,CAACC,MAAM,GAAG,UAAU,CAAC;EACvF;EAEA,IAAIE,OAAO,GAAGJ,YAAY,IAAI,CAAC,CAAC;EAChC,IAAIK,MAAM,GAAGD,OAAO,CAACC,MAAM;EAC3B,IAAIC,2BAA2B,GAAGD,MAAM,IACtCA,MAAM,CAACD,OAAO,IACdC,MAAM,CAACD,OAAO,CAACG,qBAAqB;EACtC,IAAIC,4BAA4B,GAC9BF,2BAA2B,IAAI,IAAI,GAC/B,CAAC,GACDX,SAAS,CAACW,2BAA2B,CAAC;EAC5C,IAAIC,qBAAqB,GACvBH,OAAO,CAACG,qBAAqB,IAAI,IAAI,GACjCC,4BAA4B,GAC5Bb,SAAS,CAACS,OAAO,CAACG,qBAAqB,CAAC;EAE9C,IAAIE,IAAI,GAAGb,cAAc,CAACG,SAAS,EAAEC,YAAY,CAAC;EAClD,IAAIU,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC;EAC3BD,SAAS,CAACE,cAAc,CAACH,IAAI,EAAE,CAAC,EAAEF,qBAAqB,CAAC;EACxDG,SAAS,CAACG,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACjC,IAAIC,IAAI,GAAGjB,cAAc,CAACa,SAAS,EAAEV,YAAY,CAAC;EAClD,OAAOc,IAAI;AACb"},"metadata":{},"sourceType":"module"}