{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kamalesh M\\\\Desktop\\\\reactclient\\\\frontend\\\\src\\\\components\\\\patientTabel.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect } from 'react';\nimport MaterialTable from 'material-table';\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Table() {\n  _s();\n  const {\n    user\n  } = useSelector(state => state.user);\n  const doctorJwt = user.access_token;\n  const {\n    patient\n  } = useSelector(state => state.patient);\n  useEffect(() => {\n    console.log(\"checking patient store:\", patient);\n    let clonedArray = JSON.parse(JSON.stringify(patient));\n    clonedArray.forEach(function (arrayItem) {\n      arrayItem.Fullname = arrayItem.Firstname + \" \" + arrayItem.Lastname;\n    });\n    console.log(\"fullname:\", clonedArray);\n  });\n  //const data = [ {name:\"kamalesh\",age:24},\n  //{name:\"magesh\",age:24},\n  //{name:\"nandy\",age:21},\n  //{name:\"vinmeetha\",age:28} ]\n  const data = patient.map(patient => ({\n    ...patient\n  }));\n  const columns = [{\n    title: 'Sl no',\n    field: 'tableData.id',\n    render: rowData => rowData.tableData.id + 1\n  }, {\n    title: 'name',\n    field: 'Firstname',\n    render: row => row.Firstname + \" \" + row.Lastname\n  },\n  //{\n  //    title: 'Name',\n  //    render: patient => `${patient.Firstname} ${patient.Lastname}`,\n  //    customFilterAndSearch: (term, patient) => patient.Firstname.toLowerCase().indexOf(term.toLowerCase()) !== -1\n  //},\n  {\n    title: \"Email\",\n    field: \"email\"\n  }, {\n    title: \"PhoneNumber\",\n    field: \"phoneNumber\"\n  }, {\n    title: \"Address\",\n    field: \"Address\"\n  }];\n  async function checkAuth(e) {\n    var responseCopy;\n    console.log(\"checking AUth\");\n    await fetch(\"http://localhost:8000/protected\", {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': `Bearer ${doctorJwt}` // notice the Bearer before your token\n      }\n    }).then(response => response.json()).then(json => responseCopy = json);\n    if (responseCopy.message === \"Authentic User\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  async function deletePatient(patientId) {\n    var delObj;\n    await fetch(`http://localhost:8000/patient/delete/${patientId}`, {\n      method: 'DELETE',\n      credentials: \"include\"\n    }).then(response => response.json()).then(json => delObj = json);\n    return delObj;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"table goes here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"50 vw\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        title: \"Material Table\",\n        data: data,\n        columns: columns,\n        options: {\n          paging: false,\n          actionsColumnIndex: -1,\n          addRowPosition: \"first\"\n        },\n        editable: {\n          onRowDelete: selectedRow => new Promise((resolve, reject) => {\n            const queryObj = JSON.stringify({\n              patientId: selectedRow._id\n            });\n            console.log(\"query Obj:\", queryObj);\n            var authenticated = checkAuth(doctorJwt).then(console.log(\"authenticated:\", authenticated));\n            if (authenticated) {\n              var deleteRes = deletePatient(selectedRow._id);\n              console.log(\"deleted response:\", deleteRes);\n              if (deleteRes.error === \"Not Found\") {\n                alert(\"patient Not found\");\n              } else {\n                alert(\"patient found\");\n              }\n            }\n            resolve();\n          }, 2000)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Table, \"4eFFXM1iMefh8uDZikT6KOPjcHM=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useEffect","MaterialTable","useSelector","Table","user","state","doctorJwt","access_token","patient","console","log","clonedArray","JSON","parse","stringify","forEach","arrayItem","Fullname","Firstname","Lastname","data","map","columns","title","field","render","rowData","tableData","id","row","checkAuth","e","responseCopy","fetch","method","headers","then","response","json","message","deletePatient","patientId","delObj","credentials","width","paging","actionsColumnIndex","addRowPosition","onRowDelete","selectedRow","Promise","resolve","reject","queryObj","_id","authenticated","deleteRes","error","alert"],"sources":["C:/Users/Kamalesh M/Desktop/reactclient/frontend/src/components/patientTabel.js"],"sourcesContent":["import React from \"react\";\r\nimport {useEffect} from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { useSelector } from \"react-redux\";\r\nfunction Table() {\r\n    const { user } = useSelector((state) => state.user)\r\n    const doctorJwt = user.access_token\r\n    const { patient } = useSelector((state) => state.patient)\r\n    useEffect(() => {\r\n        console.log(\"checking patient store:\",patient)\r\n        let clonedArray = JSON.parse(JSON.stringify(patient))\r\n        clonedArray.forEach(function (arrayItem) {\r\n           arrayItem.Fullname = arrayItem.Firstname +\" \" + arrayItem.Lastname;\r\n        });\r\n        console.log(\"fullname:\",clonedArray)\r\n    });\r\n    //const data = [ {name:\"kamalesh\",age:24},\r\n    //{name:\"magesh\",age:24},\r\n    //{name:\"nandy\",age:21},\r\n    //{name:\"vinmeetha\",age:28} ]\r\n    const data = patient.map(patient => ({ ...patient}));\r\n    const columns = [\r\n        { title: 'Sl no', field: 'tableData.id', render:rowData => rowData.tableData.id+1} ,\r\n        {\r\n            title:'name',\r\n            field: 'Firstname',\r\n            render: (row)=> row.Firstname +\" \" + row.Lastname\r\n        },\r\n        //{\r\n        //    title: 'Name',\r\n        //    render: patient => `${patient.Firstname} ${patient.Lastname}`,\r\n        //    customFilterAndSearch: (term, patient) => patient.Firstname.toLowerCase().indexOf(term.toLowerCase()) !== -1\r\n        //},\r\n        {\r\n            title:\"Email\",field:\"email\"\r\n        },\r\n        {\r\n            title:\"PhoneNumber\",field:\"phoneNumber\"\r\n        },\r\n        {\r\n            title:\"Address\",field:\"Address\"\r\n        }\r\n    ]\r\n    async function checkAuth(e){\r\n        var responseCopy;\r\n        console.log(\"checking AUth\")\r\n        await fetch(\"http://localhost:8000/protected\", {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': `Bearer ${doctorJwt}`, // notice the Bearer before your token\r\n            }\r\n        }).then(response => response.json())\r\n        .then(json =>  responseCopy = json);\r\n        if(responseCopy.message === \"Authentic User\"){\r\n            return true\r\n        }\r\n        else{\r\n            return false\r\n        }    \r\n    }\r\n    async function deletePatient(patientId){\r\n        var delObj;\r\n        await fetch(`http://localhost:8000/patient/delete/${patientId}`, {\r\n            method: 'DELETE',\r\n            credentials: \"include\",\r\n        }).then(response => response.json())\r\n        .then(json =>  delObj = json)\r\n        return delObj;\r\n    }\r\n    return (\r\n      <>\r\n        <h1>table goes here</h1>\r\n        <div style={{width:\"50 vw\"}}>\r\n            <MaterialTable title=\"Material Table\"\r\n            data={data}\r\n            columns={columns}\r\n            options={{\r\n                paging:false,\r\n                actionsColumnIndex: -1, addRowPosition: \"first\"\r\n            }}\r\n            editable={{\r\n                onRowDelete: selectedRow => new Promise((resolve,reject) => {\r\n                    const queryObj = JSON.stringify({\r\n                        patientId:selectedRow._id\r\n                    })\r\n                    console.log(\"query Obj:\",queryObj)\r\n                    var authenticated = checkAuth(doctorJwt).then(console.log(\"authenticated:\",authenticated))\r\n                    \r\n                    if(authenticated){\r\n                        var deleteRes = deletePatient(selectedRow._id)\r\n                        console.log(\"deleted response:\",deleteRes)\r\n                        if(deleteRes.error === \"Not Found\"){\r\n                            alert(\"patient Not found\")\r\n                        }else{\r\n                            alert(\"patient found\")\r\n                        }\r\n                    }\r\n                    resolve()\r\n                },2000)\r\n            }}\r\n            />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  \r\n  export default Table;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,SAAS,QAAO,OAAO;AAC/B,OAAOC,aAAa,MAAM,gBAAgB;AAC1C,SAASC,WAAW,QAAQ,aAAa;AAAC;AAAA;AAC1C,SAASC,KAAK,GAAG;EAAA;EACb,MAAM;IAAEC;EAAK,CAAC,GAAGF,WAAW,CAAEG,KAAK,IAAKA,KAAK,CAACD,IAAI,CAAC;EACnD,MAAME,SAAS,GAAGF,IAAI,CAACG,YAAY;EACnC,MAAM;IAAEC;EAAQ,CAAC,GAAGN,WAAW,CAAEG,KAAK,IAAKA,KAAK,CAACG,OAAO,CAAC;EACzDR,SAAS,CAAC,MAAM;IACZS,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAACF,OAAO,CAAC;IAC9C,IAAIG,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACN,OAAO,CAAC,CAAC;IACrDG,WAAW,CAACI,OAAO,CAAC,UAAUC,SAAS,EAAE;MACtCA,SAAS,CAACC,QAAQ,GAAGD,SAAS,CAACE,SAAS,GAAE,GAAG,GAAGF,SAAS,CAACG,QAAQ;IACrE,CAAC,CAAC;IACFV,OAAO,CAACC,GAAG,CAAC,WAAW,EAACC,WAAW,CAAC;EACxC,CAAC,CAAC;EACF;EACA;EACA;EACA;EACA,MAAMS,IAAI,GAAGZ,OAAO,CAACa,GAAG,CAACb,OAAO,KAAK;IAAE,GAAGA;EAAO,CAAC,CAAC,CAAC;EACpD,MAAMc,OAAO,GAAG,CACZ;IAAEC,KAAK,EAAE,OAAO;IAAEC,KAAK,EAAE,cAAc;IAAEC,MAAM,EAACC,OAAO,IAAIA,OAAO,CAACC,SAAS,CAACC,EAAE,GAAC;EAAC,CAAC,EAClF;IACIL,KAAK,EAAC,MAAM;IACZC,KAAK,EAAE,WAAW;IAClBC,MAAM,EAAGI,GAAG,IAAIA,GAAG,CAACX,SAAS,GAAE,GAAG,GAAGW,GAAG,CAACV;EAC7C,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;IACII,KAAK,EAAC,OAAO;IAACC,KAAK,EAAC;EACxB,CAAC,EACD;IACID,KAAK,EAAC,aAAa;IAACC,KAAK,EAAC;EAC9B,CAAC,EACD;IACID,KAAK,EAAC,SAAS;IAACC,KAAK,EAAC;EAC1B,CAAC,CACJ;EACD,eAAeM,SAAS,CAACC,CAAC,EAAC;IACvB,IAAIC,YAAY;IAChBvB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5B,MAAMuB,KAAK,CAAC,iCAAiC,EAAE;MAC3CC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAAS7B,SAAU,EAAC,CAAE;MAC5C;IACJ,CAAC,CAAC,CAAC8B,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAACE,IAAI,IAAKN,YAAY,GAAGM,IAAI,CAAC;IACnC,IAAGN,YAAY,CAACO,OAAO,KAAK,gBAAgB,EAAC;MACzC,OAAO,IAAI;IACf,CAAC,MACG;MACA,OAAO,KAAK;IAChB;EACJ;EACA,eAAeC,aAAa,CAACC,SAAS,EAAC;IACnC,IAAIC,MAAM;IACV,MAAMT,KAAK,CAAE,wCAAuCQ,SAAU,EAAC,EAAE;MAC7DP,MAAM,EAAE,QAAQ;MAChBS,WAAW,EAAE;IACjB,CAAC,CAAC,CAACP,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAACE,IAAI,IAAKI,MAAM,GAAGJ,IAAI,CAAC;IAC7B,OAAOI,MAAM;EACjB;EACA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAwB,eACxB;MAAK,KAAK,EAAE;QAACE,KAAK,EAAC;MAAO,CAAE;MAAA,uBACxB,QAAC,aAAa;QAAC,KAAK,EAAC,gBAAgB;QACrC,IAAI,EAAExB,IAAK;QACX,OAAO,EAAEE,OAAQ;QACjB,OAAO,EAAE;UACLuB,MAAM,EAAC,KAAK;UACZC,kBAAkB,EAAE,CAAC,CAAC;UAAEC,cAAc,EAAE;QAC5C,CAAE;QACF,QAAQ,EAAE;UACNC,WAAW,EAAEC,WAAW,IAAI,IAAIC,OAAO,CAAC,CAACC,OAAO,EAACC,MAAM,KAAK;YACxD,MAAMC,QAAQ,GAAGzC,IAAI,CAACE,SAAS,CAAC;cAC5B2B,SAAS,EAACQ,WAAW,CAACK;YAC1B,CAAC,CAAC;YACF7C,OAAO,CAACC,GAAG,CAAC,YAAY,EAAC2C,QAAQ,CAAC;YAClC,IAAIE,aAAa,GAAGzB,SAAS,CAACxB,SAAS,CAAC,CAAC8B,IAAI,CAAC3B,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAC6C,aAAa,CAAC,CAAC;YAE1F,IAAGA,aAAa,EAAC;cACb,IAAIC,SAAS,GAAGhB,aAAa,CAACS,WAAW,CAACK,GAAG,CAAC;cAC9C7C,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAC8C,SAAS,CAAC;cAC1C,IAAGA,SAAS,CAACC,KAAK,KAAK,WAAW,EAAC;gBAC/BC,KAAK,CAAC,mBAAmB,CAAC;cAC9B,CAAC,MAAI;gBACDA,KAAK,CAAC,eAAe,CAAC;cAC1B;YACJ;YACAP,OAAO,EAAE;UACb,CAAC,EAAC,IAAI;QACV;MAAE;QAAA;QAAA;QAAA;MAAA;IACA;MAAA;MAAA;MAAA;IAAA,QACA;EAAA,gBACL;AAEP;AAAC,GArGMhD,KAAK;EAAA,QACOD,WAAW,EAERA,WAAW;AAAA;AAAA,KAH1BC,KAAK;AAuGZ,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module"}