{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  patient: []\n};\nexport const PatientSlice = createSlice({\n  name: 'patient',\n  initialState,\n  reducers: {\n    populatePatientDetail: (state, action) => {\n      state.patient = JSON.parse(JSON.stringify(action.payload));\n    },\n    createNewPatient: (state, action) => {\n      console.log(\"check the payload:\", action.payload);\n      state.patient.push(action.payload);\n    },\n    updateNewPAtient: (state, action) => {\n      console.log(\"check the payload:\", action.payload);\n      //const newArr = state.patient.map(obj => {\n      //  if (obj._id === action.payload._id) {\n      //    return {\n      //      Firstname: action.payload.Firstname,\n      //          Lastname: action.payload.Lastname,\n      //          Middlename: action.payload.Middlename,\n      //          phoneNumber: action.payload.phoneNumber,\n      //          email: action.payload.email,\n      //          Address: action.payload.Address,\n      //          weight: action.payload.weight,\n      //          height: action.payload.height,\n      //          country: action.payload.country,\n      //          state: action.payload.state,\n      //          zipcode: action.payload.zipcode\n      //    };\n      //  }\n      //  \n      //  \n      //});\n      for (const obj of state.patient) {\n        if (obj._id === action.payload._id) {\n          obj.Firstname = action.payload.Firstname;\n          obj.Lastname = action.payload.Lastname;\n          obj.Middlename = action.payload.Middlename;\n          obj.phoneNumber = action.payload.phoneNumber;\n          obj.email = action.payload.email;\n          obj.Address = action.payload.Address;\n          obj.weight = action.payload.weight;\n          obj.height = action.payload.height;\n          obj.country = action.payload.country;\n          obj.state = action.payload.state;\n          obj.zipcode = action.payload;\n          break;\n        }\n      }\n      console.log(\"new state:\", state.patient);\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  populatePatientDetail,\n  createNewPatient,\n  updateNewPAtient\n} = PatientSlice.actions;\nexport default PatientSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","patient","PatientSlice","name","reducers","populatePatientDetail","state","action","JSON","parse","stringify","payload","createNewPatient","console","log","push","updateNewPAtient","obj","_id","Firstname","Lastname","Middlename","phoneNumber","email","Address","weight","height","country","zipcode","actions","reducer"],"sources":["C:/Users/Kamalesh M/Desktop/reactclient/frontend/src/redux/patientDetail.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n  patient: [],\r\n}\r\n\r\nexport const PatientSlice = createSlice({\r\n  name: 'patient',\r\n  initialState,\r\n  reducers: {\r\n    populatePatientDetail: (state, action) => {\r\n     \r\n      state.patient = JSON.parse(JSON.stringify(action.payload));\r\n    },\r\n    createNewPatient: (state, action) => {\r\n      console.log(\"check the payload:\",action.payload)\r\n      state.patient.push(action.payload);\r\n      \r\n    },\r\n    updateNewPAtient:(state, action) => {\r\n      console.log(\"check the payload:\",action.payload)\r\n      //const newArr = state.patient.map(obj => {\r\n      //  if (obj._id === action.payload._id) {\r\n      //    return {\r\n      //      Firstname: action.payload.Firstname,\r\n      //          Lastname: action.payload.Lastname,\r\n      //          Middlename: action.payload.Middlename,\r\n      //          phoneNumber: action.payload.phoneNumber,\r\n      //          email: action.payload.email,\r\n      //          Address: action.payload.Address,\r\n      //          weight: action.payload.weight,\r\n      //          height: action.payload.height,\r\n      //          country: action.payload.country,\r\n      //          state: action.payload.state,\r\n      //          zipcode: action.payload.zipcode\r\n      //    };\r\n      //  }\r\n      //  \r\n      //  \r\n      //});\r\n      for (const obj of state.patient) {\r\n        if (obj._id === action.payload._id) {\r\n          obj.Firstname= action.payload.Firstname;\r\n          obj.Lastname= action.payload.Lastname;\r\n          obj.Middlename= action.payload.Middlename;\r\n          obj.phoneNumber= action.payload.phoneNumber;\r\n          obj.email= action.payload.email;\r\n          obj.Address= action.payload.Address;\r\n          obj.weight=action.payload.weight;\r\n          obj.height= action.payload.height;\r\n          obj.country= action.payload.country;\r\n          obj.state= action.payload.state;\r\n          obj.zipcode= action.payload;  \r\n          break;\r\n        }\r\n      }\r\n      console.log(\"new state:\",state.patient)\r\n      \r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { populatePatientDetail,createNewPatient,updateNewPAtient } = PatientSlice.actions\r\n\r\nexport default PatientSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC;EACtCI,IAAI,EAAE,SAAS;EACfH,YAAY;EACZI,QAAQ,EAAE;IACRC,qBAAqB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAExCD,KAAK,CAACL,OAAO,GAAGO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,MAAM,CAACI,OAAO,CAAC,CAAC;IAC5D,CAAC;IACDC,gBAAgB,EAAE,CAACN,KAAK,EAAEC,MAAM,KAAK;MACnCM,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAACP,MAAM,CAACI,OAAO,CAAC;MAChDL,KAAK,CAACL,OAAO,CAACc,IAAI,CAACR,MAAM,CAACI,OAAO,CAAC;IAEpC,CAAC;IACDK,gBAAgB,EAAC,CAACV,KAAK,EAAEC,MAAM,KAAK;MAClCM,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAACP,MAAM,CAACI,OAAO,CAAC;MAChD;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,KAAK,MAAMM,GAAG,IAAIX,KAAK,CAACL,OAAO,EAAE;QAC/B,IAAIgB,GAAG,CAACC,GAAG,KAAKX,MAAM,CAACI,OAAO,CAACO,GAAG,EAAE;UAClCD,GAAG,CAACE,SAAS,GAAEZ,MAAM,CAACI,OAAO,CAACQ,SAAS;UACvCF,GAAG,CAACG,QAAQ,GAAEb,MAAM,CAACI,OAAO,CAACS,QAAQ;UACrCH,GAAG,CAACI,UAAU,GAAEd,MAAM,CAACI,OAAO,CAACU,UAAU;UACzCJ,GAAG,CAACK,WAAW,GAAEf,MAAM,CAACI,OAAO,CAACW,WAAW;UAC3CL,GAAG,CAACM,KAAK,GAAEhB,MAAM,CAACI,OAAO,CAACY,KAAK;UAC/BN,GAAG,CAACO,OAAO,GAAEjB,MAAM,CAACI,OAAO,CAACa,OAAO;UACnCP,GAAG,CAACQ,MAAM,GAAClB,MAAM,CAACI,OAAO,CAACc,MAAM;UAChCR,GAAG,CAACS,MAAM,GAAEnB,MAAM,CAACI,OAAO,CAACe,MAAM;UACjCT,GAAG,CAACU,OAAO,GAAEpB,MAAM,CAACI,OAAO,CAACgB,OAAO;UACnCV,GAAG,CAACX,KAAK,GAAEC,MAAM,CAACI,OAAO,CAACL,KAAK;UAC/BW,GAAG,CAACW,OAAO,GAAErB,MAAM,CAACI,OAAO;UAC3B;QACF;MACF;MACAE,OAAO,CAACC,GAAG,CAAC,YAAY,EAACR,KAAK,CAACL,OAAO,CAAC;IAEzC;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEI,qBAAqB;EAACO,gBAAgB;EAACI;AAAiB,CAAC,GAAGd,YAAY,CAAC2B,OAAO;AAE/F,eAAe3B,YAAY,CAAC4B,OAAO"},"metadata":{},"sourceType":"module"}