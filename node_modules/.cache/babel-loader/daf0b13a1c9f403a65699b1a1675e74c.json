{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kamalesh M\\\\Desktop\\\\reactclient\\\\frontend\\\\src\\\\components\\\\patientTabel.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState } from 'react';\nimport MaterialTable from 'material-table';\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { populatePatientDetail } from \"../redux/patientDetail\";\nimport PatientForm from \"./patientForm\";\nimport { Dialog, DialogContent, DialogTitle } from '@mui/material';\nimport CustomRow from \"./customRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Table(props) {\n  _s();\n  const dispatch = useDispatch();\n  const [openEditDialog, setOpenEditDialog] = useState(false);\n  const {\n    patient\n  } = useSelector(state => state.patient);\n  var patientList = patient.map(patient => ({\n    ...patient\n  }));\n  const [data, setData] = useState(patientList);\n  const {\n    user\n  } = useSelector(state => state.user);\n  const doctorJwt = user.access_token;\n  const columns = [{\n    title: 'Sl no',\n    field: 'tableData.id',\n    render: rowData => rowData.tableData.id + 1,\n    width: \"10%\"\n  }, {\n    title: 'name',\n    field: 'Firstname',\n    render: row => row.Firstname + \" \" + row.Lastname,\n    width: \"20%\"\n  }, {\n    title: \"Email\",\n    field: \"email\",\n    width: \"20%\"\n  }, {\n    title: \"PhoneNumber\",\n    field: \"phoneNumber\",\n    width: \"20%\"\n  }, {\n    title: \"Address\",\n    render: row => truncate(row.Address),\n    width: \"30%\"\n  }];\n  async function checkAuth(e) {\n    var responseCopy;\n    console.log(\"checking AUth\");\n    await fetch(\"http://localhost:8000/protected\", {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json',\n        'Authorization': `Bearer ${doctorJwt}` // notice the Bearer before your token\n      }\n    }).then(response => response.json()).then(json => responseCopy = json);\n\n    //checking if the user is authentic by sending the jwt to validate it\n\n    if (responseCopy.message === \"Authentic User\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  async function deletePatient(patientId) {\n    var delObj;\n    await fetch(`http://localhost:8000/patient/${patientId}`, {\n      method: 'DELETE',\n      credentials: \"include\"\n    }).then(response => response.json()).then(json => delObj = json);\n    return delObj;\n  }\n  async function addPatientDialogToggle() {\n    console.log(\"paitent create function called\");\n    props.dialogHandler();\n    //setopenDialog(true)\n  }\n\n  function truncate(str) {\n    return str.length > 25 ? str.substring(0, 20) + \"...\" : str;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Dialog, {\n        open: openEditDialog,\n        PaperProps: {\n          style: {\n            minHeight: '90%',\n            maxHeight: '90%',\n            minWidth: '900px'\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Patient Edit Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(PatientForm, {\n            dialogType: \"Hello\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"50 vw\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n        title: \"Material Table\",\n        data: data,\n        columns: columns,\n        components: {\n          Row: props => /*#__PURE__*/_jsxDEV(CustomRow, {\n            ...props\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 32\n          }, this)\n        },\n        options: {\n          paging: false,\n          actionsColumnIndex: -1,\n          addRowPosition: \"first\"\n        },\n        editable: {\n          onRowDelete: selectedRow => new Promise((resolve, reject) => {\n            const queryObj = JSON.stringify({\n              patientId: selectedRow._id\n            });\n            console.log(\"query Obj:\", queryObj);\n            var authenticated = checkAuth(doctorJwt).then(function (result) {\n              console.log(result);\n            });\n            //if the user is validate the deletion code goes through\n            if (authenticated) {\n              deletePatient(selectedRow._id).then(function (result) {\n                if (result.error === \"Not Found\" && result.statusCode === 404) {\n                  alert(\"patient Not found\");\n                } else if (result.message === \"Deletion Success\") {\n                  console.log(\"patient found\", result.Response.Firstname, result.Response.Lastname);\n\n                  //after successful query instead of querying again for the patient list , we delete the local storage of patientlist and dispatch the new list to the patient store\n\n                  //var newData = data.filter((item) => item._id !== result.Response._id);\n                  console.log(\"newTable:\", newData);\n                  //setData(newData)\n                  dispatch(populatePatientDetail(newData));\n                  setTimeout(() => {\n                    resolve();\n                  }, 2000);\n                }\n              });\n            } else {\n              console.log(\"failed\");\n            }\n          })\n        },\n        actions: [{\n          icon: 'add',\n          tooltip: 'Add User',\n          isFreeAction: true,\n          onClick: event => addPatientDialogToggle()\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Table, \"Ww0QRUVo5uXsXQ0eb4pQnApsrZk=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","MaterialTable","useSelector","useDispatch","populatePatientDetail","PatientForm","Dialog","DialogContent","DialogTitle","CustomRow","Table","props","dispatch","openEditDialog","setOpenEditDialog","patient","state","patientList","map","data","setData","user","doctorJwt","access_token","columns","title","field","render","rowData","tableData","id","width","row","Firstname","Lastname","truncate","Address","checkAuth","e","responseCopy","console","log","fetch","method","headers","then","response","json","message","deletePatient","patientId","delObj","credentials","addPatientDialogToggle","dialogHandler","str","length","substring","style","minHeight","maxHeight","minWidth","Row","paging","actionsColumnIndex","addRowPosition","onRowDelete","selectedRow","Promise","resolve","reject","queryObj","JSON","stringify","_id","authenticated","result","error","statusCode","alert","Response","newData","setTimeout","icon","tooltip","isFreeAction","onClick","event"],"sources":["C:/Users/Kamalesh M/Desktop/reactclient/frontend/src/components/patientTabel.js"],"sourcesContent":["import React from \"react\";\r\nimport {useState} from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {populatePatientDetail} from\"../redux/patientDetail\";\r\nimport PatientForm from \"./patientForm\";\r\nimport {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle\r\n}from '@mui/material'\r\nimport CustomRow from \"./customRow\";\r\nfunction Table(props) {\r\n    const dispatch = useDispatch()\r\n    const [openEditDialog,setOpenEditDialog] = useState(false);\r\n    const { patient } = useSelector((state) => state.patient)\r\n    var patientList = patient.map(patient => ({ ...patient}));\r\n    const [data, setData] = useState(patientList)\r\n    const { user } = useSelector((state) => state.user)\r\n    const doctorJwt = user.access_token\r\n    \r\n    \r\n    const columns = [\r\n        { title: 'Sl no', field: 'tableData.id', render:rowData => rowData.tableData.id+1,width: \"10%\"} ,\r\n        {\r\n            title:'name',\r\n            field: 'Firstname',\r\n            render: (row)=> row.Firstname +\" \" + row.Lastname, width: \"20%\"\r\n        },\r\n        {\r\n            title:\"Email\",field:\"email\", width: \"20%\"\r\n        },\r\n        {\r\n            title:\"PhoneNumber\",field:\"phoneNumber\", width: \"20%\"\r\n        },\r\n        {\r\n            title:\"Address\",render: (row)=> truncate(row.Address), width: \"30%\"\r\n        }\r\n    ]\r\n    async function checkAuth(e){\r\n        var responseCopy;\r\n        console.log(\"checking AUth\")\r\n        await fetch(\"http://localhost:8000/protected\", {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'Authorization': `Bearer ${doctorJwt}`, // notice the Bearer before your token\r\n            }\r\n        }).then(response => response.json())\r\n        .then(json =>  responseCopy = json);\r\n\r\n        //checking if the user is authentic by sending the jwt to validate it\r\n\r\n        if(responseCopy.message === \"Authentic User\"){\r\n            return true\r\n        }\r\n        else{\r\n            return false\r\n        }    \r\n    }\r\n    async function deletePatient(patientId){\r\n        var delObj;\r\n        await fetch(`http://localhost:8000/patient/${patientId}`, {\r\n            method: 'DELETE',\r\n            credentials: \"include\",\r\n        }).then(response => response.json())\r\n        .then(json =>  delObj = json)\r\n        return delObj;\r\n    }\r\n    \r\n    async function addPatientDialogToggle(){\r\n        console.log(\"paitent create function called\") \r\n        props.dialogHandler()\r\n        //setopenDialog(true)\r\n    }\r\n    function truncate(str){\r\n        return str.length > 25 ? str.substring(0, 20) + \"...\" : str;\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <div>\r\n        <Dialog open={openEditDialog} PaperProps={{ style: {\r\n            minHeight: '90%',\r\n            maxHeight: '90%',\r\n            minWidth: '900px'\r\n        }}}>\r\n            <DialogTitle>\r\n              Patient Edit Form\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <PatientForm  dialogType=\"Hello\" />\r\n            </DialogContent>\r\n        </Dialog>\r\n        </div>\r\n        <div style={{width:\"50 vw\"}}>\r\n            <MaterialTable title=\"Material Table\"\r\n            data={data}\r\n            columns={columns}\r\n            components={{\r\n                Row: props => (<CustomRow {...props} />\r\n                )\r\n            }}\r\n            options={{\r\n                paging:false,\r\n                actionsColumnIndex: -1, addRowPosition: \"first\"\r\n            }}\r\n            editable={{\r\n                onRowDelete:  selectedRow =>  new Promise((resolve,reject) => {\r\n                    const queryObj = JSON.stringify({\r\n                        patientId:selectedRow._id\r\n                    })\r\n                    console.log(\"query Obj:\",queryObj)\r\n                    var authenticated = checkAuth(doctorJwt).then(function(result) {\r\n                        console.log(result)\r\n                     })\r\n                    //if the user is validate the deletion code goes through\r\n                    if(authenticated){\r\n                        deletePatient(selectedRow._id).then(function(result) {\r\n                            if(result.error === \"Not Found\" && result.statusCode === 404){\r\n                                alert(\"patient Not found\")\r\n                            }else if(result.message === \"Deletion Success\") {\r\n                                console.log(\"patient found\",result.Response.Firstname ,result.Response.Lastname)\r\n\r\n                                //after successful query instead of querying again for the patient list , we delete the local storage of patientlist and dispatch the new list to the patient store\r\n\r\n                                //var newData = data.filter((item) => item._id !== result.Response._id);\r\n                                console.log(\"newTable:\",newData)\r\n                                //setData(newData)\r\n                                dispatch(populatePatientDetail(newData))\r\n                                setTimeout(() => {\r\n                                    \r\n                                    resolve()\r\n                                }, 2000)\r\n                            }\r\n                         })\r\n                        \r\n                    }\r\n                    else{\r\n                        console.log(\"failed\")\r\n                    }\r\n                })\r\n            }}\r\n            actions={[\r\n                {\r\n                  icon: 'add',\r\n                  tooltip: 'Add User',\r\n                  isFreeAction: true,\r\n                  onClick: (event) => addPatientDialogToggle()\r\n                }\r\n            ]}\r\n            />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  \r\n  export default Table;"],"mappings":"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"},"metadata":{},"sourceType":"module"}